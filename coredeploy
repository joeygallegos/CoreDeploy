#!/bin/bash
# load deploy config variables
. /home/deploy.config

echo "Application starting up.."
echo "Staging: $staging_dir"
echo "Production: $production_dir"
echo "Backup: $backup_dir"
echo "Application config: $app_config"

pull_changes_from_github() {
	now="$(date +'%m_%d_%Y_%H_%M')"
	temp_download_dir="/home/deploy/temp/"
	install_dir="/usr/bin/"

	# create dir if not exist
	if [[ ! -e "$temp_download_dir$now" ]]; then
		mkdir "$temp_download_dir$now"

	download_file_name=$temp_download_dir$now"/coredeploy"

	# download the new file from github
	wget -c -O $download_file_name "https://raw.githubusercontent.com/joeygallegos/CoreDeploy/master/coredeploy"

	# copy to install dir
	cp -f $download_file_name $install_dir"/coredeploy"
}

# clean old js and scss/css files, do not delete images
remove_production_asset_files() {
	echo "Removing production asset files: [js, scss]"
	rm -rf /var/www/production/public/assets/scripts/*.js
	rm -rf /var/www/production/public/assets/scss/*.scss
}

if [[ $# -eq 0 ]]; then
	# grant permissions to staging dir
	echo "Provided 0777 access to staging directory"
	chmod -R 777 $staging_dir*
else
	
	# clean 
	if [[ $1 = "clean" ]]; then
		remove_production_asset_files
	fi

	# self-upgrade 
	if [[ $1 = "self-upgrade" ]]; then
		pull_changes_from_github
	fi

	# build 
	if [[ $1 = "build" ]]; then
		echo "Executing the cache script manually"
		/usr/bin/php /var/www/staging/app/tasks/deploy/cache.php
		/usr/bin/php /var/www/production/app/tasks/deploy/cache.php
	fi

	# this command is used for moving files from staging dir to the production dir
	if [ $1 = "production" ] || [ $1 = "prod" ]; then

		# copy backup code into dir
		echo "Copying last code release to directory"
		now="$(date +'%m_%d_%Y_%H_%M')"

		# create backup dir with today's date and copy all files from prod dir to backup dir
		echo "Creating the backup directory for the production dir"
		mkdir $backup_dir$now/

		echo "Copy production files to the backup dir"
		cp -R $production_dir* $backup_dir$now/

		# cleanout production app dir
		echo "Deleting production app dir files"
		rm -rf /var/www/production/app/*

		remove_production_asset_files

		# deploy staging code to production dir
		# avoid copying logs from staging to production
		echo "Copying staging files to production"
		cp -R $staging_dir"app/*" $production_dir"app"
		cp -R $staging_dir"public/*" $production_dir"public"

		# copy staging composer file to production
		cp -R $staging_dir"composer.json" $production_dir"/composer.json"

		# restore config to production directory from backup directory
		cp -R $backup_dir$now"/app/env/"$app_config $production_dir"app/env/"$app_config

		# update composer data
		echo "Running composer install/update with optimized autoload"

		# update composer dependencies
		composer install && composer update
		composer dump-autoload -o # optimize the autoloader for production use 

		# grant permissions in prod dir
		echo "Granting permissions to production directory"
		chmod -R 777 $production_dir*
	else
		echo "Invalid argument provided"
	fi
fi